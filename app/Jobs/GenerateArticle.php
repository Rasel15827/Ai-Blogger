<?php

namespace App\Jobs;

use App\Models\AutoGeneratedArticle;
use App\Models\OpenAiSetting;
use Illuminate\Bus\Queueable;
use OpenAI\Laravel\Facades\OpenAI;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Contracts\Queue\ShouldBeUnique;


class GenerateArticle implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;
    protected $schedule;
    /**
     * Create a new job instance.
     */
    public function __construct($schedule)
    {
        $this->schedule = $schedule;


    }

    public function generate_article($scheduleSettings)
    {
        $topics = json_decode($scheduleSettings->topics, true);

        // picking a random topic
        $randomIndex = array_rand($topics);
        $randomTopic = $topics[$randomIndex];

        $language = $scheduleSettings->language;
        $voice_tone = $scheduleSettings->voice_tone;
        $creativity = $scheduleSettings->creativity;
        $max_length = $scheduleSettings->max_length;
        $prompt = "Generate article with a proper title on the topic: $randomTopic. A article is must. Article length should be maximum $max_length words. Creativity is $creativity between 0 and 1. Language is $language. Tone of voice must be $voice_tone";

        $apiSettings = OpenAiSetting::first();
        config(['openai.api_key' => $apiSettings->api_key]);

        $response = OpenAI::completions()->create([
            'model' => 'text-davinci-003',
            'prompt' => $prompt,
            'max_tokens' => $max_length,
        ]);

        AutoGeneratedArticle::create([
            'topic'=> $randomTopic,
            'article'=> $response['choices'][0]['text'],
            'total_token'=>$response['usage']['total_tokens'],
        ]);
    }

    /**
     * Execute the job.
     */
    public function handle()
    {
        $this->generate_article($this->schedule);

        GenerateArticle::dispatch($this->schedule)
            ->onQueue('generate-article')
            ->delay(now()->addMinutes($this->schedule->interval));
    }
}
